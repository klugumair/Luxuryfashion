/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */

/* Table schema:
CREATE TABLE kv_store_bf16095b (
  key TEXT NOT NULL PRIMARY KEY,
  value JSONB NOT NULL
);
*/

// View at https://supabase.com/dashboard/project/cyavobcqomnfvmfjgwyg/database/tables

// This file provides a simple key-value interface for storing Figma Make data. It should be adequate for most small-scale use cases.
import { createClient } from "https://esm.sh/@supabase/supabase-js@2"

const client = () => {
  const supabaseUrl = Deno.env.get("SUPABASE_URL")
  const supabaseKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")
  
  if (!supabaseUrl || !supabaseKey) {
    throw new Error("Missing Supabase environment variables")
  }
  
  return createClient(supabaseUrl, supabaseKey)
}

// Set stores a key-value pair in the database.
export const set = async (key: string, value: any): Promise<void> => {
  try {
    const supabase = client()
    const { error } = await supabase.from("kv_store_bf16095b").upsert({
      key,
      value
    });
    if (error) {
      throw new Error(`KV Set Error: ${error.message}`);
    }
  } catch (error) {
    console.error('KV set error:', error)
    throw error
  }
};

// Get retrieves a key-value pair from the database.
export const get = async (key: string): Promise<any> => {
  try {
    const supabase = client()
    const { data, error } = await supabase.from("kv_store_bf16095b")
      .select("value")
      .eq("key", key)
      .maybeSingle();
    
    if (error) {
      throw new Error(`KV Get Error: ${error.message}`);
    }
    return data?.value;
  } catch (error) {
    console.error('KV get error:', error)
    throw error
  }
};

// Delete deletes a key-value pair from the database.
export const del = async (key: string): Promise<void> => {
  try {
    const supabase = client()
    const { error } = await supabase.from("kv_store_bf16095b")
      .delete()
      .eq("key", key);
    
    if (error) {
      throw new Error(`KV Delete Error: ${error.message}`);
    }
  } catch (error) {
    console.error('KV delete error:', error)
    throw error
  }
};

// Sets multiple key-value pairs in the database.
export const mset = async (keys: string[], values: any[]): Promise<void> => {
  try {
    if (keys.length !== values.length) {
      throw new Error("Keys and values arrays must have the same length")
    }
    
    const supabase = client()
    const { error } = await supabase.from("kv_store_bf16095b")
      .upsert(keys.map((k, i) => ({ key: k, value: values[i] })));
    
    if (error) {
      throw new Error(`KV MSet Error: ${error.message}`);
    }
  } catch (error) {
    console.error('KV mset error:', error)
    throw error
  }
};

// Gets multiple key-value pairs from the database.
export const mget = async (keys: string[]): Promise<any[]> => {
  try {
    const supabase = client()
    const { data, error } = await supabase.from("kv_store_bf16095b")
      .select("value")
      .in("key", keys);
    
    if (error) {
      throw new Error(`KV MGet Error: ${error.message}`);
    }
    return data?.map((d) => d.value) ?? [];
  } catch (error) {
    console.error('KV mget error:', error)
    throw error
  }
};

// Deletes multiple key-value pairs from the database.
export const mdel = async (keys: string[]): Promise<void> => {
  try {
    const supabase = client()
    const { error } = await supabase.from("kv_store_bf16095b")
      .delete()
      .in("key", keys);
    
    if (error) {
      throw new Error(`KV MDel Error: ${error.message}`);
    }
  } catch (error) {
    console.error('KV mdel error:', error)
    throw error
  }
};

// Search for key-value pairs by prefix.
export const getByPrefix = async (prefix: string): Promise<any[]> => {
  try {
    const supabase = client()
    const { data, error } = await supabase.from("kv_store_bf16095b")
      .select("key, value")
      .like("key", prefix + "%");
    
    if (error) {
      throw new Error(`KV GetByPrefix Error: ${error.message}`);
    }
    return data?.map((d) => d.value) ?? [];
  } catch (error) {
    console.error('KV getByPrefix error:', error)
    throw error
  }
};